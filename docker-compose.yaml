volumes:
  caddy_data:
  caddy_config:
  database:
  pnpm_store:
services:



  # --------------------
  # Dev
  # --------------------

  dev:
    build:
      context: .
      target: base
      args:
        WORK_DIR: ${WORK_DIR}
        PNPM_DIR: ${PNPM_DIR}
    tty: true
    environment:
      NODE_ENV: development
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
      - 3000:3000 # analyze
    volumes:
      - pnpm_store:${PNPM_DIR}
      - ./:/app
    env_file:
      - .env
    depends_on:
      caddy:
        condition: service_started
      database:
        condition: service_healthy



  # --------------------
  # Prod
  # --------------------

  prod:
    build:
      context: .
      target: prod
      args:
        WORK_DIR: ${WORK_DIR}
        PNPM_DIR: ${PNPM_DIR}
    environment:
      NODE_ENV: production
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
      - pnpm_store:${PNPM_DIR}
      - ./caddy:/app/caddy
      - ./packages/directus/uploads:/app/packages/directus/uploads
    env_file:
      - .env
    depends_on:
      caddy:
        condition: service_started
      database:
        condition: service_healthy



  # --------------------
  # Caddy
  # --------------------

  caddy:
    image: caddy:2-alpine
    environment:
      BACKEND: prod:${BACKEND_PORT}
    ports:
      - ${CADDY_PORT_HTTP}:80
      - ${CADDY_PORT_HTTPS}:443
    volumes:
      - ${CADDY_FILE}:/etc/caddy/Caddyfile
      - ./caddy/common:/etc/caddy/common
      - ./caddy:/www
      - caddy_data:/data
      - caddy_config:/config
    env_file:
      - .env



  # --------------------
  # Database
  # --------------------

  database:
    image: postgres:17-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    command: postgres -p ${DB_PORT}
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE} -p ${DB_PORT}" ]
      interval: 5s
      timeout: 5s
      retries: 5
